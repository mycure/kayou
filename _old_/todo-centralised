--
 etudier le SMP pour pouvoir faire evoluer kaneton vers ca.

--
  faire un programme qui rajoute une section kaneton/kayou a un ELF.

  les informations ajoutees peuvent etre:
    - memoire requise ou memoire habituellement utilisee
    - programme a distribue ou a parallelise (machines vs processeurs)
    - type cpu du binaire

 toutes ces informations pourraient permettre a kayou de trouver l'endroit
 ideal ou lance le binaire, quel binaire lance, comme le repartir etc..

--
 nombre de lignes

   MINIX 2.0.4: 20 000
   MINIX 3.0.0: 7 500
   MACH 3.0: 75 000

   kaneton ~: 15 000

--
 creer un service monitor lance en premier apres mod qui recevra des
 messages du kernel comme par exemple: les messages de debug du kernel
 et des dumps etc.. via des messages asynchrones.

--
 plutot que de faire un systeme de errno, et puisque toute la communication
 se fait par messages on pourrait imaginer que le message d'erreur (s'il
 existe se trouve dans la reponse) comme ca quand on fait un appel a une
 fonctinnalite d une autre machine sans trop savoir ce que le service
 de cette machine fournit on peut avoir des infos sur les erreurs.

--
 il faut prevoir que tout le demarrage des services via fichier de conf
 doit pouvoir etre fait en dynamique. par exemple si mod reserve un
 segment special (CATCH) pour le service tty (console) et bien il faut
 imaginer que si on lance ce meme serveur a la main une fois le systeme
 boote, soit le systeme de lui meme (via un fichier de conf) sait quels
 sont les objets dont il herite ou alors il faut prevoir des messages style
 segment_acquire() pour acquerir un segment specifique: la memoire video.

--
 envoye un message shutdown pour killer proprement une task.

--
 on pourrait imaginer que chaque service/driver accepte un message de type
 UPDATE et envoie sa capability task si jamais l'appellant est de confiance.

 de cette maniere on pourrait imaginer un service update qui enverrai
 UPDATE des qu une nouvell version d'un programme tournant existe. ainsi
 le service update stoppe la tache en question temporairement a un endroit
 precis et par exemple met a jour le code dynamiquement. c est complique
 mais ce serait pas mal.

--
 Antoine Castaing, Nicolas Clermont et Damien Laniel.

 Nicolas Clermont a ete pris en stage de fin d'annee chez EADS
 dans un departement de developement de micronoyau embarque.

 leur demander leurs bookmarks, et dire que quand meme kaneton
 ca peut servir pour les gens que ca interesse vraiment.

--
 je crois qu il y a une solution pour l'auth de messages.

 un client A demande le droit d'envoye un msg a un autre B. le server
 auth accepte. celui ci demande au kernel (via une capability que seul lui
 detient) une capability de message pour A vers B. le kernel l'envoie donc
 au server auth. et ce dernier retransmet cette cap au client qui l'utilisera
 pour communiquer.

 au final il n y a pas de duplication de cap puisque seul les kernels les
 a. de plus le serveur auth peut tjs faire tourner des algos de detections
 d'abus, blacklist etc.. puisqu il sait quand meme qui a le droit de
 communiquer avec qui.

 ca bande!

 les cap ca defonce tout...

 a noter que Mach fournit la primitive send_one() utilise pour les RPC
 pour autoriser l envoi d'un seul message. a etudier!

 Mach est bcp d'autres utilise un systeme de port mais aussi un ensemble
 de ports. comme ca un serveur attend que sur un port et recoie une categorie
 de messages.

 pour kaneton on peut imaginer un truc similaire mais d'une autre maniere.

--
 definitivement:

  Amoeba: n'utilise pas de memoire virtuelle.
  V distributed system (Stanford Cheriton): toute communication par RPC
    (ca doit etre vachement lourd) de plus pas de notion de port mais
    on nomme le processus destination

  kaneton: toute communication par message meme sur le systeme distribue.
    on nomme egalement le process/groupe destination

 pour kaneton on utilisera une communication style MPI soit direct une
 lib existante soit on en refait une.

--
 definir une interface pour les drivers de sorte qu'ils soient portable
 tres facilement, qu'ils ne fassent que des entree sorties. dans l'interface
 on fournira le systeme de communication + gestion des structures de donnees.

 a etudier!

 Lionel a une idee de projet la dessus: sigour_b

--
 systeme de notify.

 lorsqu'une tache meurt, le core envoie un message a un service notify
 pour l'avertir de la mort de cette tache.

 ensuite peut etre que ce service va informer le groupe notify du
 systeme reparti.

 les taches s'abonnent au groupe notify pour savoir quand une tache
 meurt.

 neanmoins pour allouer quelque chose sur une autre machine ca implique
 toujours que ce soit une tache du kernel qui fasse l'action sinon le kernel
 ne connait pas l'appelant.

--
 un service demande au service dev de lui donner un acces sur tel ressource
 lui le fait avec le kernel car il a la capability. ensuite il sais dialoguer
 plus precisement soit car machdep soit "faut trouver comment nommer"
 et comme ca aucun service ne va se faire chier a nommer les periph a part
 dev.

--
 un seul swapper et on active ou non des options: network, hard drive etc..
 car un swapper ca stocke de la memoire sur un support secondaire qui peut
 etre n'importe quoi, une disquette, une clef usb etc..

--
 le fait de filer des params dans un fichier de conf implique qu on
 soit capable aussi de lancer ce meme service une fois le kernel boote.

 il faudra donc fournir un moyen de passer les meme params, capabilities
 inclues. il faudra ptet un filesystem pour mod assez complet.

--
 pour par exemple un driver, il faudra qu il soit capable de communiquer
 avec le hard autrement dit de se rajouter une trap.

 pour cela il faudra dans mod lui filer soit une cap precise sur l'evenement
 precise, soit une cap sur le gestionnaire d'evenements.

 soit il passera par le gestionnaire de dev qui lui saura si telle personne
 a le droit de se rajouter. (comment?)

--
 segment:

 il faudra rajouter dans le bootloader init.c un segment correspondant
 au dma: SEGMENT_TYPE_CATCH

 on pourrait imaginer dans le fichier de conf dire que telle zone
 est en mode catch et qu elle est catchable que par telle tache (avec
 tel nom par exemple)

--
 mieux decouper les drivers et modules en fonctions de leur types:

   drivers/
     block/
     char/
     ...

   services/
     ...

--
 parser: params et args

 int		main(int argc, char** argv);

 ce sera conforme a un truc classique avec la forme:

   --verbose		1

 concernant les params, ce sont juste des arguments interpretes par le
 gestionnaire de modules.

 A REVOIR.

-- swap
 faire du swap sur le reseau et sur le disque mais experimenter
 le reseau.

 <reflexion>
 le swapper (reseau ou disk) sera un service sinon c'est laid de base.

 le swapper doit obtenir des infos sur l'utilisation de zones memoire.

 habituellement il recupere les infos sur des pages mais dans kaneton
 tout se base sur des segments, les seuls objets memoire identifiables.

 donc deja de base on swappera des segments.

 ensuite sur intel par exemple on recupere les infos via la memoire
 virtuelle car c'est la MMU qui est capable de connaitre les acces memoire

 or si on se base d'un point de vue logique c est la memoire choses que les
 permissions. c'est implemente par la memoire virtuelle mais ca concerne
 des zones physiques.

 donc en realite on va dire, comme pour les perms, que les infos d'utilisation
 se trouve en relation avec des segments.

 donc, le swapper demandera au gestionnaire de segment son etat (taux
 d'utilisation de la memoire physique) toutes les N secondes. si ce taux
 est trop eleve il faut swapper des segments. il va donc demande au
 gestionnaire de segments de lui donner l'identifiant du segment le moins
 utilise. il va ensuite prendre le segment et le mettre sur disque.

 de plus il faudra marque le segment comme non-present mais egalement la
 region pour que la partie dep fasse ce qu il faut.

 attention: ok pour le mettre sur disque mais ensuite lorsqu il y aura un
 acces comment le recuperer? un systeme de pagger doit etre mis en place.

 attention: pour que le swapper puisse acceder comme il veut aux segment
 il faut qu il ait une capability pour chaque, ou alors une capability generale
 sur le gestionnaire de segment. il faut regler ce probleme pour pouvoir
 fournir des cap generic.

 attention: comment donner cette cap generique, a quel moment etc.. :(((

 attention: rajouter un type de segment: swap ou non-present

 attention: dans le cas d'un swapper reseau et disk ils vont se marcher dessus
   D: etat
   R: etat
   D: zone moins utilisee
   R: zone moins utilisee
   D: je prends cette zone pour la swappee
   R: je prends cette zone pour la swappee: ERROR zone inexistante
   etc.. tout le temps

 donc soit faire les deux en uns, soit faire des timer qui se chevauchent soit
 faire en sorte qu ils communiquent ou je sais pas.

 !!! bcp de problemes, ca sent le cul.
 </reflexion>

 <reflexion>
 autre solution, le crt cree un thread qui va checker tous les N l'etat
 de la memoire et demande un segment lui appartenant et peu utilise sur
 il faut swapper.

 bref que le user le fasse et qu il transmette les cap a un service swap
 a la limite.

 mais ca aussi pas terrible.

 ARFFFFFFFFFFF!
 </reflexion>

 bon on verra plus tard.
